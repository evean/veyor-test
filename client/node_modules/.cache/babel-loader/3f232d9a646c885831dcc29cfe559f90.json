{"ast":null,"code":"import _defineProperty from \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport QueryString from 'query-string';\nimport fetchJsonp from 'fetch-jsonp';\n/**\n * A method that calls an API endpoint with the specified method and params\n * @param  {String} endpoint       The URL to call\n * @params {Object}                Additional options\n */\n\nconst callApi = (endpoint, {\n  method = 'get',\n  params = {}\n} = {}) => {\n  let reqBody = params;\n  let queryString = '';\n\n  if (method === 'get') {\n    // We can't have a body on a get request as it will silently fail\n    reqBody = null;\n    if (params && Object.keys(params).length) queryString = \"?\".concat(QueryString.stringify(params));\n  }\n\n  console.log('calling endpoint', \"\".concat(endpoint).concat(queryString));\n  return fetch(\"\".concat(endpoint).concat(queryString), {\n    method,\n    body: reqBody\n  }).then(response => {\n    return response.ok ? response.json : response.json().then(json => Promise.reject(_objectSpread({}, response, {}, json)));\n  });\n};\n/**\n * This is a dispatch specific version of the callApi method that can be used with actions\n * It returns a function that matches the expected shape for a thunk action\n *\n * @method callApiWithDispatch\n * @param {Function} callback Should be a function of the form (dispatch, state, promise)\n *                            and return a promise\n */\n\n\nconst callApiWithDispatch = (endpoint, options = {}, callbackPromiseFunction) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    options.params = options.params || {};\n    const apiPromise = callApi(endpoint, options, dispatch).then(result => result).catch(error => {\n      throw error;\n    });\n    const callbackPromise = callbackPromiseFunction ? callbackPromiseFunction(dispatch, state, apiPromise) : apiPromise;\n    if (!callbackPromise.then) throw Error('Callback function did not return a promise');\n    return callbackPromise;\n  };\n};\n\nexport { callApi, callApiWithDispatch };","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/core/lib/apiHelpers.js"],"names":["QueryString","fetchJsonp","callApi","endpoint","method","params","reqBody","queryString","Object","keys","length","stringify","console","log","fetch","body","then","response","ok","json","Promise","reject","callApiWithDispatch","options","callbackPromiseFunction","dispatch","getState","state","apiPromise","result","catch","error","callbackPromise","Error"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA;;;;;;AAKA,MAAMC,OAAO,GAAG,CACdC,QADc,EAEd;AACEC,EAAAA,MAAM,GAAG,KADX;AAEEC,EAAAA,MAAM,GAAG;AAFX,IAGI,EALU,KAMX;AACH,MAAIC,OAAO,GAAGD,MAAd;AACA,MAAIE,WAAW,GAAG,EAAlB;;AAEA,MAAIH,MAAM,KAAK,KAAf,EAAsB;AACpB;AACAE,IAAAA,OAAO,GAAG,IAAV;AACA,QAAID,MAAM,IAAIG,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAAlC,EAA0CH,WAAW,cAAOP,WAAW,CAACW,SAAZ,CAAsBN,MAAtB,CAAP,CAAX;AAC3C;;AAEFO,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,YAAmCV,QAAnC,SAA8CI,WAA9C;AAEC,SAAOO,KAAK,WAAIX,QAAJ,SAAeI,WAAf,GAA8B;AAAEH,IAAAA,MAAF;AAAUW,IAAAA,IAAI,EAAET;AAAhB,GAA9B,CAAL,CACNU,IADM,CACDC,QAAQ,IAAI;AAChB,WAAOA,QAAQ,CAACC,EAAT,GACHD,QAAQ,CAACE,IADN,GAEHF,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBG,IAAI,IAAIC,OAAO,CAACC,MAAR,mBAAoBJ,QAApB,MAAiCE,IAAjC,EAA7B,CAFJ;AAGD,GALM,CAAP;AAMD,CAxBD;AA0BA;;;;;;;;;;AAQA,MAAMG,mBAAmB,GAAG,CAACnB,QAAD,EAAWoB,OAAO,GAAG,EAArB,EAAyBC,uBAAzB,KAAqD;AAE/E,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7B,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACAH,IAAAA,OAAO,CAAClB,MAAR,GAAiBkB,OAAO,CAAClB,MAAR,IAAkB,EAAnC;AAEA,UAAMuB,UAAU,GAAG1B,OAAO,CAACC,QAAD,EAAWoB,OAAX,EAAoBE,QAApB,CAAP,CAClBT,IADkB,CACba,MAAM,IAAIA,MADG,EAElBC,KAFkB,CAEZC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KAJkB,CAAnB;AAMA,UAAMC,eAAe,GAAGR,uBAAuB,GAC3CA,uBAAuB,CAACC,QAAD,EAAWE,KAAX,EAAkBC,UAAlB,CADoB,GAE3CA,UAFJ;AAIA,QAAI,CAACI,eAAe,CAAChB,IAArB,EAA2B,MAAMiB,KAAK,CAAC,4CAAD,CAAX;AAE3B,WAAOD,eAAP;AACD,GAjBD;AAkBD,CApBD;;AAsBA,SAAS9B,OAAT,EAAkBoB,mBAAlB","sourcesContent":["import QueryString from 'query-string'\nimport fetchJsonp from 'fetch-jsonp'\n\n/**\n * A method that calls an API endpoint with the specified method and params\n * @param  {String} endpoint       The URL to call\n * @params {Object}                Additional options\n */\nconst callApi = (\n  endpoint,\n  {\n    method = 'get',\n    params = {},\n  } = {}\n) => {\n  let reqBody = params\n  let queryString = ''\n\n  if (method === 'get') {\n    // We can't have a body on a get request as it will silently fail\n    reqBody = null\n    if (params && Object.keys(params).length) queryString = `?${QueryString.stringify(params)}`\n  }\n\n\tconsole.log('calling endpoint', `${endpoint}${queryString}`)\n\n  return fetch(`${endpoint}${queryString}`, { method, body: reqBody })\n  .then(response => {\n    return response.ok\n      ? response.json\n      : response.json().then(json => Promise.reject({ ...response, ...json }))\n  })\n}\n\n/**\n * This is a dispatch specific version of the callApi method that can be used with actions\n * It returns a function that matches the expected shape for a thunk action\n *\n * @method callApiWithDispatch\n * @param {Function} callback Should be a function of the form (dispatch, state, promise)\n *                            and return a promise\n */\nconst callApiWithDispatch = (endpoint, options = {}, callbackPromiseFunction) => {\n\n  return (dispatch, getState) => {\n    const state = getState()\n    options.params = options.params || {}\n\n    const apiPromise = callApi(endpoint, options, dispatch)\n    .then(result => result)\n    .catch(error => {\n      throw error\n    })\n\n    const callbackPromise = callbackPromiseFunction\n      ? callbackPromiseFunction(dispatch, state, apiPromise)\n      : apiPromise\n\n    if (!callbackPromise.then) throw Error('Callback function did not return a promise')\n\n    return callbackPromise\n  }\n}\n\nexport { callApi, callApiWithDispatch }\n"]},"metadata":{},"sourceType":"module"}