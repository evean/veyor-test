{"ast":null,"code":"import _defineProperty from \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { callApiWithDispatch } from '../../../core/lib/apiHelpers';\nimport { API_URL } from '../../../core/lib/constants';\nexport const RECEIVE_SEARCH_RESULTS = 'RECEIVE_SEARCH_RESULTS';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_LOADING = 'SET_LOADING';\nexport const setLoading = state => {\n  return {\n    type: SET_LOADING,\n    payload: state\n  };\n};\nexport const fetchPublicFeed = (api, params = {}) => {\n  return callApiWithDispatch(\"\".concat(API_URL, \"/\").concat(api, \"/feed\"), {\n    params\n  }, (dispatch, state, promise) => {\n    dispatch(setLoading(true));\n    return promise.then(results => {\n      dispatch({\n        type: RECEIVE_SEARCH_RESULTS,\n        payload: _objectSpread({}, results, {\n          searchTerm: null\n        })\n      });\n    }).catch(e => {\n      console.error('Error loading results:', e);\n      dispatch({\n        type: SET_ERROR,\n        payload: e\n      });\n    }).finally(() => dispatch(setLoading(false)));\n  });\n};\nexport const fetchSearchResults = (api, params) => {\n  return callApiWithDispatch(\"\".concat(API_URL, \"/\").concat(api, \"/search\"), {\n    params: {\n      search: params\n    }\n  }, (dispatch, state, promise) => {\n    dispatch(setLoading(true));\n    return promise.then(results => {\n      dispatch({\n        type: RECEIVE_SEARCH_RESULTS,\n        payload: _objectSpread({}, results, {\n          searchTerm: params\n        })\n      });\n    }).catch(e => {\n      console.error('Error loading results:', e);\n      dispatch({\n        type: SET_ERROR,\n        payload: e\n      });\n    }).finally(() => dispatch(setLoading(false)));\n  });\n};","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/actions/imageSearchActions.js"],"names":["callApiWithDispatch","API_URL","RECEIVE_SEARCH_RESULTS","SET_ERROR","SET_LOADING","setLoading","state","type","payload","fetchPublicFeed","api","params","dispatch","promise","then","results","searchTerm","catch","e","console","error","finally","fetchSearchResults","search"],"mappings":";;;;;;AAAA,SAASA,mBAAT,QAAoC,8BAApC;AACA,SAASC,OAAT,QAAwB,6BAAxB;AAEA,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAGP,OAAO,MAAMC,UAAU,GAAGC,KAAK,IAAI;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEH,WADD;AAELI,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,eAAe,GAAG,CAACC,GAAD,EAAMC,MAAM,GAAG,EAAf,KAAsB;AACnD,SAAOX,mBAAmB,WACrBC,OADqB,cACVS,GADU,YAExB;AACEC,IAAAA;AADF,GAFwB,EAKxB,CAACC,QAAD,EAAWN,KAAX,EAAkBO,OAAlB,KAA8B;AAC5BD,IAAAA,QAAQ,CAACP,UAAU,CAAC,IAAD,CAAX,CAAR;AAEA,WAAOQ,OAAO,CACbC,IADM,CACDC,OAAO,IAAI;AACfH,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEL,sBADC;AAEPM,QAAAA,OAAO,oBAAOO,OAAP;AAAgBC,UAAAA,UAAU,EAAE;AAA5B;AAFA,OAAD,CAAR;AAID,KANM,EAONC,KAPM,CAOAC,CAAC,IAAI;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCF,CAAxC;AACAN,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEJ,SADC;AAEPK,QAAAA,OAAO,EAAEU;AAFF,OAAD,CAAR;AAID,KAbM,EAcNG,OAdM,CAcE,MAAMT,QAAQ,CAACP,UAAU,CAAC,KAAD,CAAX,CAdhB,CAAP;AAeD,GAvBuB,CAA1B;AAyBD,CA1BM;AA4BP,OAAO,MAAMiB,kBAAkB,GAAG,CAACZ,GAAD,EAAMC,MAAN,KAAiB;AACjD,SAAOX,mBAAmB,WACrBC,OADqB,cACVS,GADU,cAExB;AACEC,IAAAA,MAAM,EAAE;AAAEY,MAAAA,MAAM,EAAEZ;AAAV;AADV,GAFwB,EAKxB,CAACC,QAAD,EAAWN,KAAX,EAAkBO,OAAlB,KAA8B;AAC5BD,IAAAA,QAAQ,CAACP,UAAU,CAAC,IAAD,CAAX,CAAR;AAEA,WAAOQ,OAAO,CACbC,IADM,CACDC,OAAO,IAAI;AACfH,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEL,sBADC;AAEPM,QAAAA,OAAO,oBAAOO,OAAP;AAAgBC,UAAAA,UAAU,EAAEL;AAA5B;AAFA,OAAD,CAAR;AAID,KANM,EAONM,KAPM,CAOAC,CAAC,IAAI;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCF,CAAxC;AACAN,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEJ,SADC;AAEPK,QAAAA,OAAO,EAAEU;AAFF,OAAD,CAAR;AAID,KAbM,EAcNG,OAdM,CAcE,MAAMT,QAAQ,CAACP,UAAU,CAAC,KAAD,CAAX,CAdhB,CAAP;AAeD,GAvBuB,CAA1B;AAyBD,CA1BM","sourcesContent":["import { callApiWithDispatch } from '../../../core/lib/apiHelpers'\nimport { API_URL } from '../../../core/lib/constants'\n\nexport const RECEIVE_SEARCH_RESULTS = 'RECEIVE_SEARCH_RESULTS'\nexport const SET_ERROR = 'SET_ERROR'\nexport const SET_LOADING = 'SET_LOADING'\n\n\nexport const setLoading = state => {\n  return {\n    type: SET_LOADING,\n    payload: state\n  }\n}\n\nexport const fetchPublicFeed = (api, params = {}) => {\n  return callApiWithDispatch(\n    `${API_URL}/${api}/feed`,\n    {\n      params,\n    },\n    (dispatch, state, promise) => {\n      dispatch(setLoading(true))\n\n      return promise\n      .then(results => {\n        dispatch({\n          type: RECEIVE_SEARCH_RESULTS,\n          payload: { ...results, searchTerm: null }\n        })\n      })\n      .catch(e => {\n        console.error('Error loading results:', e)\n        dispatch({\n          type: SET_ERROR,\n          payload: e\n        })\n      })\n      .finally(() => dispatch(setLoading(false)))\n    }\n  )\n}\n\nexport const fetchSearchResults = (api, params) => {\n  return callApiWithDispatch(\n    `${API_URL}/${api}/search`,\n    {\n      params: { search: params },\n    },\n    (dispatch, state, promise) => {\n      dispatch(setLoading(true))\n\n      return promise\n      .then(results => {\n        dispatch({\n          type: RECEIVE_SEARCH_RESULTS,\n          payload: { ...results, searchTerm: params }\n        })\n      })\n      .catch(e => {\n        console.error('Error loading results:', e)\n        dispatch({\n          type: SET_ERROR,\n          payload: e\n        })\n      })\n      .finally(() => dispatch(setLoading(false)))\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}