{"ast":null,"code":"import _defineProperty from \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * A container component that wraps the search bar and supplies the dispatcher for submitting\n * the Flickr search. This is in order to make the component itself reusable and free from logic.\n */\nimport { connect } from 'react-redux';\nimport Component from '../components/SearchBar';\nimport { API_URL } from '../../../core/lib/constants';\nimport { fetchSearchResults } from '../actions/imageSearchActions';\n\nconst mapStateToProps = (state, ownProps) => {\n  return _objectSpread({}, ownProps);\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSubmit: options => dispatch(fetchSearchResults(API_URL, options))\n  };\n};\n\nconst FlickrSearchForm = connect(mapStateToProps, mapDispatchToProps)(Component);\nexport default FlickrSearchForm;","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/containers/FlickrSearchForm.js"],"names":["connect","Component","API_URL","fetchSearchResults","mapStateToProps","state","ownProps","mapDispatchToProps","dispatch","onSubmit","options","FlickrSearchForm"],"mappings":";;;;;;AAAA;;;;AAKA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,SAASC,kBAAT,QAAmC,+BAAnC;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,2BACKA,QADL;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWF,QAAX,KAAwB;AACjD,SAAO;AACLG,IAAAA,QAAQ,EAAEC,OAAO,IAAIF,QAAQ,CAACL,kBAAkB,CAACD,OAAD,EAAUQ,OAAV,CAAnB;AADxB,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAGX,OAAO,CAC9BI,eAD8B,EAE9BG,kBAF8B,CAAP,CAGvBN,SAHuB,CAAzB;AAKA,eAAeU,gBAAf","sourcesContent":["/*\n * A container component that wraps the search bar and supplies the dispatcher for submitting\n * the Flickr search. This is in order to make the component itself reusable and free from logic.\n */\n\nimport { connect } from 'react-redux'\nimport Component from '../components/SearchBar'\nimport { API_URL } from '../../../core/lib/constants'\nimport { fetchSearchResults } from '../actions/imageSearchActions'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    ...ownProps,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSubmit: options => dispatch(fetchSearchResults(API_URL, options)),\n  }\n}\n\nconst FlickrSearchForm = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Component)\n\nexport default FlickrSearchForm\n"]},"metadata":{},"sourceType":"module"}