{"ast":null,"code":"import _defineProperty from \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/components/ImageSearchResults.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * A search results wrapper that displays the items in a Masonry layout.\n * If the autoFetch prop is supplied, this method will be called on mount to fetch initial results\n * (ie. from a public feed).\n *\n * The view will display a loader while results are being loaded, or an error message if there was\n * a problem fetching the results.\n */\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport Masonry from 'react-masonry-component';\nimport ImageThumbnail from './ImageThumbnail';\nimport LoaderIcon from 'react-loader-icon';\nimport '../stylesheets/ImageSearchPage.scss';\nconst LABELS = {\n  REFRESH: 'Refresh',\n  SHOW_FEED: 'Show feed'\n};\nconst MESSAGES = {\n  ALL_PHOTOS: 'Photos from everyone',\n  ERROR: 'There was an error fetching search results',\n  NO_RESULTS: 'Your search returned no results. Please try a different search term.',\n  SEARCH_RESULTS_FOR: 'Showing search results for:',\n  TRY_AGAIN: 'Please try again later.'\n};\n\nclass ImageSearchResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imagesLoaded: [],\n      // used to track loading status of the current set of images\n      searchTerm: null\n    };\n    this.handleImageLoaded = this.handleImageLoaded.bind(this);\n  }\n  /**\n   * We need to reset the imagesLoaded array if a new search has been submitted.\n   * @return {Object}       Updated state\n   */\n\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.searchTerm !== state.searchTerm) {\n      return _objectSpread({}, state, {\n        imagesLoaded: [],\n        searchTerm: props.searchTerm\n      });\n    }\n\n    return _objectSpread({}, state);\n  }\n\n  componentDidMount() {\n    // Fetch initial results\n    if (this.props.autoFetch) {\n      this.props.autoFetch();\n    }\n  }\n  /**\n   * Tracks the status of loaded files so that we can delay rendering the image\n   * container until all images have loaded. Each ImageThumbnail component calls this\n   * method once it has finished loading.\n   * @param  {String} id The id of the image that has finished loading\n   */\n\n\n  handleImageLoaded(id) {\n    this.setState({\n      imagesLoaded: [...this.state.imagesLoaded, id]\n    });\n  }\n  /**\n   * Renders the action bar on the top of the results view.\n   * For now we only have one action which switches to the public feed view if the user\n   * is currently viewing search results, or refreshes the results if the user is viewing\n   * the feed. The action bar will not be shown if autoFetch is disabled.\n   * @return {Component} A single button or an empty div if the feed view is disabled.\n   */\n\n\n  renderActions() {\n    const _this$props = this.props,\n          autoFetch = _this$props.autoFetch,\n          items = _this$props.items,\n          loading = _this$props.loading,\n          searchTerm = _this$props.searchTerm;\n    if (!autoFetch || loading || !items.length) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    });\n    const buttonLabel = !searchTerm ? LABELS.REFRESH : LABELS.SHOW_FEED;\n    return React.createElement(Button, {\n      onClick: autoFetch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, buttonLabel);\n  }\n  /**\n   * Displays an error message if one exists\n   * @return {Component} The error message from the server\n   */\n\n\n  renderError() {\n    return React.createElement(\"p\", {\n      className: \"results__error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, MESSAGES.ERROR, \": \", this.props.error.message, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), MESSAGES.TRY_AGAIN);\n  }\n  /**\n   * Returns the title from the feed if applicable, or a title containing the current search term.\n   * @return {String} The title to be displayed\n   */\n\n\n  getTitle() {\n    return !this.props.searchTerm ? this.props.autoFetch && MESSAGES.ALL_PHOTOS || 'f' : \"\".concat(MESSAGES.SEARCH_RESULTS_FOR, \" \").concat(this.props.searchTerm);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          error = _this$props2.error,\n          items = _this$props2.items;\n    const imagesLoaded = this.state.imagesLoaded.length >= items.length;\n    const loading = this.props.loading || !imagesLoaded;\n    const results = items.map(item => React.createElement(ImageThumbnail, Object.assign({\n      key: item.id,\n      className: \"results__image\",\n      onLoad: this.handleImageLoaded\n    }, item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })));\n    return React.createElement(\"div\", {\n      className: \"results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, error && this.renderError(), loading && !error && React.createElement(LoaderIcon, {\n      className: \"results__loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), !loading && !error && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, !items.length && this.props.searchTerm && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, MESSAGES.NO_RESULTS), React.createElement(\"div\", {\n      className: \"results__top-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"results__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.getTitle()), this.renderActions())), !this.props.loading && React.createElement(Masonry, {\n      className: \"results__gallery \".concat(!loading ? 'loaded' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, results));\n  }\n\n}\n\nImageSearchResults.propTypes = {\n  autoFetch: PropTypes.func,\n  error: PropTypes.object,\n  items: PropTypes.array,\n  loading: PropTypes.bool,\n  searchTerm: PropTypes.string,\n  title: PropTypes.string\n};\nexport default ImageSearchResults;","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/components/ImageSearchResults.jsx"],"names":["PropTypes","React","Component","Button","Masonry","ImageThumbnail","LoaderIcon","LABELS","REFRESH","SHOW_FEED","MESSAGES","ALL_PHOTOS","ERROR","NO_RESULTS","SEARCH_RESULTS_FOR","TRY_AGAIN","ImageSearchResults","constructor","props","state","imagesLoaded","searchTerm","handleImageLoaded","bind","getDerivedStateFromProps","componentDidMount","autoFetch","id","setState","renderActions","items","loading","length","buttonLabel","renderError","error","message","getTitle","render","results","map","item","propTypes","func","object","array","bool","string","title"],"mappings":"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","sourcesContent":["/*\n * A search results wrapper that displays the items in a Masonry layout.\n * If the autoFetch prop is supplied, this method will be called on mount to fetch initial results\n * (ie. from a public feed).\n *\n * The view will display a loader while results are being loaded, or an error message if there was\n * a problem fetching the results.\n */\n\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport Masonry from 'react-masonry-component'\nimport ImageThumbnail from './ImageThumbnail'\nimport LoaderIcon from 'react-loader-icon'\nimport '../stylesheets/ImageSearchPage.scss'\n\nconst LABELS = {\n  REFRESH: 'Refresh',\n  SHOW_FEED: 'Show feed'\n}\n\nconst MESSAGES = {\n  ALL_PHOTOS: 'Photos from everyone',\n  ERROR: 'There was an error fetching search results',\n  NO_RESULTS: 'Your search returned no results. Please try a different search term.',\n  SEARCH_RESULTS_FOR: 'Showing search results for:',\n  TRY_AGAIN: 'Please try again later.'\n}\n\nclass ImageSearchResults extends Component {\n  static propTypes = {\n    autoFetch: PropTypes.func,\n    error: PropTypes.object,\n    items: PropTypes.array,\n    loading: PropTypes.bool,\n    searchTerm: PropTypes.string,\n    title: PropTypes.string,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      imagesLoaded: [], // used to track loading status of the current set of images\n      searchTerm: null,\n    }\n\n    this.handleImageLoaded = this.handleImageLoaded.bind(this)\n  }\n\n  /**\n   * We need to reset the imagesLoaded array if a new search has been submitted.\n   * @return {Object}       Updated state\n   */\n  static getDerivedStateFromProps(props, state) {\n    if (props.searchTerm !== state.searchTerm) {\n      return {\n        ...state,\n        imagesLoaded: [],\n        searchTerm: props.searchTerm\n      }\n    }\n\n    return { ...state }\n  }\n\n  componentDidMount() {\n    // Fetch initial results\n    if (this.props.autoFetch) {\n      this.props.autoFetch()\n    }\n  }\n\n  /**\n   * Tracks the status of loaded files so that we can delay rendering the image\n   * container until all images have loaded. Each ImageThumbnail component calls this\n   * method once it has finished loading.\n   * @param  {String} id The id of the image that has finished loading\n   */\n  handleImageLoaded(id) {\n    this.setState({ imagesLoaded: [ ...this.state.imagesLoaded, id ]})\n  }\n\n  /**\n   * Renders the action bar on the top of the results view.\n   * For now we only have one action which switches to the public feed view if the user\n   * is currently viewing search results, or refreshes the results if the user is viewing\n   * the feed. The action bar will not be shown if autoFetch is disabled.\n   * @return {Component} A single button or an empty div if the feed view is disabled.\n   */\n  renderActions() {\n    const { autoFetch, items, loading, searchTerm } = this.props\n    if (!autoFetch || loading || !items.length) return <div />\n    const buttonLabel = !searchTerm ? LABELS.REFRESH : LABELS.SHOW_FEED\n\n    return (\n      <Button onClick={autoFetch}>\n        {buttonLabel}\n      </Button>\n    )\n  }\n\n  /**\n   * Displays an error message if one exists\n   * @return {Component} The error message from the server\n   */\n  renderError() {\n    return <p className=\"results__error\">\n      {MESSAGES.ERROR}: {this.props.error.message}<br/>\n      {MESSAGES.TRY_AGAIN}\n    </p>\n  }\n\n  /**\n   * Returns the title from the feed if applicable, or a title containing the current search term.\n   * @return {String} The title to be displayed\n   */\n  getTitle() {\n    return !this.props.searchTerm\n      ? (this.props.autoFetch && MESSAGES.ALL_PHOTOS) || 'f'\n      : `${MESSAGES.SEARCH_RESULTS_FOR} ${this.props.searchTerm}`\n  }\n\n  render() {\n    const { error, items } = this.props\n    const imagesLoaded = this.state.imagesLoaded.length >= items.length\n    const loading = this.props.loading || !imagesLoaded\n\n    const results = items.map(item => (\n      <ImageThumbnail\n        key={item.id}\n        className=\"results__image\"\n        onLoad={this.handleImageLoaded}\n        {...item}\n      />\n    ))\n\n    return (\n      <div className=\"results\">\n        {error && this.renderError()}\n        {loading && !error && <LoaderIcon className=\"results__loader\" />}\n\n        {!loading && !error &&\n          <div>\n            {!items.length && this.props.searchTerm && <p>{MESSAGES.NO_RESULTS}</p>}\n\n            <div className=\"results__top-bar\">\n              <h2 className=\"results__title\">\n                {this.getTitle()}\n              </h2>\n              {this.renderActions()}\n            </div>\n          </div>\n        }\n\n        {!this.props.loading &&\n          <Masonry className={`results__gallery ${!loading ? 'loaded' : ''}`}>\n            {results}\n          </Masonry>\n        }\n      </div>\n    )\n  }\n}\n\nexport default ImageSearchResults\n"]},"metadata":{},"sourceType":"module"}