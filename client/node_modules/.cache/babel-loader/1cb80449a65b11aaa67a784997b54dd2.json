{"ast":null,"code":"import _defineProperty from \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * Export store with middleware applied\n */\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport * as reducers from './reducers';\nconst enhancers = [applyMiddleware(thunk)];\nconst reducer = combineReducers(_objectSpread({}, reducers));\nconst store = createStore(reducer, {}, compose(...enhancers));\nexport default store;","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/core/store.js"],"names":["applyMiddleware","combineReducers","compose","createStore","thunk","reducers","enhancers","reducer","store"],"mappings":";;;;;;AAAA;;;AAIA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,OAA3C,EAAoDC,WAApD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AAEA,MAAMC,SAAS,GAAG,CAACN,eAAe,CAACI,KAAD,CAAhB,CAAlB;AACA,MAAMG,OAAO,GAAGN,eAAe,mBAAMI,QAAN,EAA/B;AACA,MAAMG,KAAK,GAAGL,WAAW,CAACI,OAAD,EAAU,EAAV,EAAcL,OAAO,CAAC,GAAGI,SAAJ,CAArB,CAAzB;AAEA,eAAeE,KAAf","sourcesContent":["/*\n * Export store with middleware applied\n */\n\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport * as reducers from './reducers'\n\nconst enhancers = [applyMiddleware(thunk)]\nconst reducer = combineReducers({ ...reducers })\nconst store = createStore(reducer, {}, compose(...enhancers))\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}