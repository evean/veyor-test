{"ast":null,"code":"var _jsxFileName = \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/components/ImageSearchResults.jsx\";\n\n/*\n * A search results wrapper that displays the items in a Masonry layout.\n * If the autoFetch prop is supplied, this method will be called on mount to fetch initial results\n * (ie. from a public feed).\n *\n * The view will display a loader while results are being loaded, or an error message if there was\n * a problem fetching the results.\n */\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport Masonry from 'react-masonry-component';\nimport Image from './Image';\nimport LoaderIcon from \"react-loader-icon\";\nimport '../stylesheets/ImageSearchPage.scss';\n\nclass ImageSearchResults extends Component {\n  componentDidMount() {\n    // Fetch initial results if applicable\n    if (this.props.autoFetch) {\n      this.props.autoFetch();\n    }\n  }\n  /**\n   * Renders the action bar on the top of the results view.\n   * For now we only have one action which switches to the public feed view if the user\n   * is currently viewing search results, or refreshes the results if the user is viewing\n   * the feed. The action bar will not be shown if autoFetch is disabled.\n   * @return {Component} A single button or an empty div if the feed view is disabled.\n   */\n\n\n  renderActions() {\n    const _this$props = this.props,\n          autoFetch = _this$props.autoFetch,\n          items = _this$props.items,\n          loading = _this$props.loading,\n          searchTerm = _this$props.searchTerm;\n    if (!autoFetch || !loading || !items.length) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n    const buttonLabel = !searchTerm ? 'Refresh' : 'Show feed';\n    return React.createElement(Button, {\n      onClick: autoFetch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, buttonLabel);\n  }\n  /**\n   * Returns the title from the feed if applicable, or a title containing the current search term.\n   * @return {String} The title to be displayed\n   */\n\n\n  renderTitle() {\n    return !this.props.searchTerm ? this.props.title : !this.props.results.length ? '' : \"Search results for: \".concat(this.props.searchTerm);\n  }\n  /**\n   * Displays an error message if one exists\n   * @return {Component} The error message from the server\n   */\n\n\n  renderError() {\n    return React.createElement(\"p\", {\n      className: \"results__error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"There was an error: \", this.props.error.message, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), \"Please try again later.\");\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          error = _this$props2.error,\n          items = _this$props2.items,\n          loading = _this$props2.loading;\n    const results = items.map(item => React.createElement(Image, Object.assign({\n      key: item.url,\n      className: \"results__image\"\n    }, item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })));\n    return React.createElement(\"div\", {\n      className: \"results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, error && this.renderError(), loading && !error && React.createElement(LoaderIcon, {\n      className: \"results__loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), !loading && !error && !results.length && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Your search returned no results. Please try a different search term.\"), React.createElement(\"div\", {\n      className: \"results__top-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"results__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.renderTitle()), this.renderActions()), !loading && React.createElement(Masonry, {\n      className: \"results__gallery\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, results));\n  }\n\n}\n\nImageSearchResults.propTypes = {\n  autoFetch: PropTypes.func,\n  error: PropTypes.object,\n  items: PropTypes.array,\n  loading: PropTypes.bool,\n  searchTerm: PropTypes.string,\n  title: PropTypes.string\n};\nexport default ImageSearchResults;","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/components/ImageSearchResults.jsx"],"names":["PropTypes","React","Component","Button","Masonry","Image","LoaderIcon","ImageSearchResults","componentDidMount","props","autoFetch","renderActions","items","loading","searchTerm","length","buttonLabel","renderTitle","title","results","renderError","error","message","render","map","item","url","propTypes","func","object","array","bool","string"],"mappings":"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","sourcesContent":["/*\n * A search results wrapper that displays the items in a Masonry layout.\n * If the autoFetch prop is supplied, this method will be called on mount to fetch initial results\n * (ie. from a public feed).\n *\n * The view will display a loader while results are being loaded, or an error message if there was\n * a problem fetching the results.\n */\n\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport Masonry from 'react-masonry-component'\nimport Image from './Image'\nimport LoaderIcon from \"react-loader-icon\"\nimport '../stylesheets/ImageSearchPage.scss'\n\nclass ImageSearchResults extends Component {\n  static propTypes = {\n    autoFetch: PropTypes.func,\n    error: PropTypes.object,\n    items: PropTypes.array,\n    loading: PropTypes.bool,\n    searchTerm: PropTypes.string,\n    title: PropTypes.string,\n  }\n\n  componentDidMount() {\n    // Fetch initial results if applicable\n    if (this.props.autoFetch) {\n      this.props.autoFetch()\n    }\n  }\n\n  /**\n   * Renders the action bar on the top of the results view.\n   * For now we only have one action which switches to the public feed view if the user\n   * is currently viewing search results, or refreshes the results if the user is viewing\n   * the feed. The action bar will not be shown if autoFetch is disabled.\n   * @return {Component} A single button or an empty div if the feed view is disabled.\n   */\n  renderActions() {\n    const { autoFetch, items, loading, searchTerm } = this.props\n    if (!autoFetch || !loading || !items.length) return <div />\n    const buttonLabel = !searchTerm ? 'Refresh' : 'Show feed'\n\n    return (\n      <Button onClick={autoFetch}>\n        {buttonLabel}\n      </Button>\n    )\n  }\n\n  /**\n   * Returns the title from the feed if applicable, or a title containing the current search term.\n   * @return {String} The title to be displayed\n   */\n  renderTitle() {\n    return !this.props.searchTerm\n      ? this.props.title\n      : !this.props.results.length\n        ? ''\n        : `Search results for: ${this.props.searchTerm}`\n  }\n\n  /**\n   * Displays an error message if one exists\n   * @return {Component} The error message from the server\n   */\n  renderError() {\n    return <p className=\"results__error\">\n      There was an error: {this.props.error.message}<br/>\n      Please try again later.\n    </p>\n  }\n\n  render() {\n    const { error, items, loading } = this.props\n    const results = items.map(item => (\n      <Image key={item.url} className=\"results__image\" {...item} />\n    ))\n\n    return (\n      <div className=\"results\">\n        {error && this.renderError()}\n        {loading && !error && <LoaderIcon className=\"results__loader\" />}\n        {!loading && !error && !results.length &&\n          <p>Your search returned no results. Please try a different search term.</p>\n        }\n\n        <div className=\"results__top-bar\">\n          <h2 className=\"results__title\">\n            {this.renderTitle()}\n          </h2>\n          {this.renderActions()}\n        </div>\n\n        {!loading &&\n          <Masonry className=\"results__gallery\">\n            {results}\n          </Masonry>\n        }\n      </div>\n    )\n  }\n}\n\nexport default ImageSearchResults\n"]},"metadata":{},"sourceType":"module"}