{"ast":null,"code":"import _defineProperty from \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * A container component that wraps the ImageSearchResults component, supplies the Flickr\n * specific dispatchers and parses the results into the format expected by the component.\n * If we wanted to fetch images from a different API, this container can easily be swapped out for\n * another one with different endpoints and parsers.\n */\nimport { connect } from 'react-redux';\nimport Component from '../components/ImageSearchResults';\nimport { fetchPublicFeed, fetchSearchResults } from '../actions/imageSearchActions';\nimport { parseFlickrImageData } from '../../../core/lib/flickrHelpers';\n\nconst mapStateToProps = (state, ownProps) => {\n  const _state$imageSearch$re = state.imageSearch.results,\n        error = _state$imageSearch$re.error,\n        rawItems = _state$imageSearch$re.items,\n        loading = _state$imageSearch$re.loading,\n        searchTerm = _state$imageSearch$re.searchTerm,\n        title = _state$imageSearch$re.title; // Parse the raw data from Flickr into the correct format\n\n  const items = (rawItems || []).map(item => parseFlickrImageData(item));\n  return _objectSpread({}, ownProps, {\n    error,\n    items,\n    loading,\n    searchTerm,\n    title\n  });\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    // Fetch the initial feed to display (optional)\n    autoFetch: () => dispatch(fetchPublicFeed()),\n    fetchSearchResults: options => dispatch(fetchSearchResults(options))\n  };\n};\n\nconst FlickrSearchResults = connect(mapStateToProps, mapDispatchToProps)(Component);\nexport default FlickrSearchResults;","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/containers/FlickrSearchResults.js"],"names":["connect","Component","fetchPublicFeed","fetchSearchResults","parseFlickrImageData","mapStateToProps","state","ownProps","imageSearch","results","error","rawItems","items","loading","searchTerm","title","map","item","mapDispatchToProps","dispatch","autoFetch","options","FlickrSearchResults"],"mappings":";;;;;;AAAA;;;;;;AAOA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,+BAApD;AACA,SAASC,oBAAT,QAAqC,iCAArC;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAAA,gCACoBD,KAAK,CAACE,WAAN,CAAkBC,OADtC;AAAA,QACnCC,KADmC,yBACnCA,KADmC;AAAA,QACrBC,QADqB,yBAC5BC,KAD4B;AAAA,QACXC,OADW,yBACXA,OADW;AAAA,QACFC,UADE,yBACFA,UADE;AAAA,QACUC,KADV,yBACUA,KADV,EAE3C;;AACA,QAAMH,KAAK,GAAG,CAACD,QAAQ,IAAI,EAAb,EAAiBK,GAAjB,CAAqBC,IAAI,IAAIb,oBAAoB,CAACa,IAAD,CAAjD,CAAd;AAEA,2BACKV,QADL;AAEEG,IAAAA,KAFF;AAGEE,IAAAA,KAHF;AAIEC,IAAAA,OAJF;AAKEC,IAAAA,UALF;AAMEC,IAAAA;AANF;AAQD,CAbD;;AAeA,MAAMG,kBAAkB,GAAG,CAACC,QAAD,EAAWZ,QAAX,KAAwB;AACjD,SAAO;AACL;AACAa,IAAAA,SAAS,EAAE,MAAMD,QAAQ,CAACjB,eAAe,EAAhB,CAFpB;AAGLC,IAAAA,kBAAkB,EAAEkB,OAAO,IAAIF,QAAQ,CAAChB,kBAAkB,CAACkB,OAAD,CAAnB;AAHlC,GAAP;AAKD,CAND;;AAQA,MAAMC,mBAAmB,GAAGtB,OAAO,CACjCK,eADiC,EAEjCa,kBAFiC,CAAP,CAG1BjB,SAH0B,CAA5B;AAKA,eAAeqB,mBAAf","sourcesContent":["/*\n * A container component that wraps the ImageSearchResults component, supplies the Flickr\n * specific dispatchers and parses the results into the format expected by the component.\n * If we wanted to fetch images from a different API, this container can easily be swapped out for\n * another one with different endpoints and parsers.\n */\n\nimport { connect } from 'react-redux'\nimport Component from '../components/ImageSearchResults'\nimport { fetchPublicFeed, fetchSearchResults } from '../actions/imageSearchActions'\nimport { parseFlickrImageData } from '../../../core/lib/flickrHelpers'\n\nconst mapStateToProps = (state, ownProps) => {\n  const { error, items: rawItems, loading, searchTerm, title } = state.imageSearch.results\n  // Parse the raw data from Flickr into the correct format\n  const items = (rawItems || []).map(item => parseFlickrImageData(item))\n\n  return {\n    ...ownProps,\n    error,\n    items,\n    loading,\n    searchTerm,\n    title\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    // Fetch the initial feed to display (optional)\n    autoFetch: () => dispatch(fetchPublicFeed()),\n    fetchSearchResults: options => dispatch(fetchSearchResults(options)),\n  }\n}\n\nconst FlickrSearchResults = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Component)\n\nexport default FlickrSearchResults\n"]},"metadata":{},"sourceType":"module"}