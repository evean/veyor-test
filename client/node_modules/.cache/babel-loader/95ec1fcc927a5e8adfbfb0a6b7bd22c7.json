{"ast":null,"code":"var _jsxFileName = \"/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/components/ImageThumbnail.jsx\";\n\n/*\n * An image component meant to be displayed in the search results gallery.\n * It will be rendered as a link if a link URL is supplied.\n */\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\n\nconst ImageThumbnail = props => {\n  /*\n  static propTypes = {\n    author: PropTypes.string,\n    className: PropTypes.string,\n    date: PropTypes.string,\n    link: PropTypes.string,\n    onLoad: PropTypes.func,\n    id: PropTypes.string,\n    title: PropTypes.string,\n    url: PropTypes.string.isRequired,\n  }\n   constructor(props) {\n    super(props)\n     this.handleLoaded = this.handleLoaded.bind(this)\n  }\n  */\n\n  /*\n   * If supplied, this method will get called once the image has finished loading. For instance,\n   * we may want to wait until all images have finished loading before rendering them.\n   */\n  const handleLoaded = () => {\n    if (props.onLoad) props.onLoad(props.id);\n  };\n\n  const className = props.className,\n        link = props.link,\n        title = props.title,\n        url = props.url;\n  const image = React.createElement(\"img\", {\n    src: url,\n    alt: title,\n    onLoad: handleLoaded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  });\n  const content = !link ? image : React.createElement(\"a\", {\n    href: link,\n    rel: \"noopener noreferrer\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, image);\n  return React.createElement(\"div\", {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, content);\n};\n\nexport default ImageThumbnail;","map":{"version":3,"sources":["/Users/eandersson018/Documents/Workspace/eve/veyor/client/src/modules/imageSearch/components/ImageThumbnail.jsx"],"names":["PropTypes","React","PureComponent","ImageThumbnail","props","handleLoaded","onLoad","id","className","link","title","url","image","content"],"mappings":";;AAAA;;;;AAKA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B;;;;;;;;;;;;;;;;;AAmBA;;;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAID,KAAK,CAACE,MAAV,EAAkBF,KAAK,CAACE,MAAN,CAAaF,KAAK,CAACG,EAAnB;AACnB,GAFD;;AAxB8B,QA4BtBC,SA5BsB,GA4BUJ,KA5BV,CA4BtBI,SA5BsB;AAAA,QA4BXC,IA5BW,GA4BUL,KA5BV,CA4BXK,IA5BW;AAAA,QA4BLC,KA5BK,GA4BUN,KA5BV,CA4BLM,KA5BK;AAAA,QA4BEC,GA5BF,GA4BUP,KA5BV,CA4BEO,GA5BF;AA6B9B,QAAMC,KAAK,GAAG;AAAK,IAAA,GAAG,EAAED,GAAV;AAAe,IAAA,GAAG,EAAED,KAApB;AAA2B,IAAA,MAAM,EAAEL,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAd;AAEA,QAAMQ,OAAO,GAAG,CAACJ,IAAD,GACZG,KADY,GAEX;AAAG,IAAA,IAAI,EAAEH,IAAT;AAAe,IAAA,GAAG,EAAC,qBAAnB;AAAyC,IAAA,MAAM,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEG,KADF,CAFL;AAOE,SACE;AAAK,IAAA,SAAS,EAAEJ,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,OADH,CADF;AAKH,CA3CD;;AA6CA,eAAeV,cAAf","sourcesContent":["/*\n * An image component meant to be displayed in the search results gallery.\n * It will be rendered as a link if a link URL is supplied.\n */\n\nimport PropTypes from 'prop-types'\nimport React, { PureComponent } from 'react'\n\nconst ImageThumbnail = props => {\n  /*\n  static propTypes = {\n    author: PropTypes.string,\n    className: PropTypes.string,\n    date: PropTypes.string,\n    link: PropTypes.string,\n    onLoad: PropTypes.func,\n    id: PropTypes.string,\n    title: PropTypes.string,\n    url: PropTypes.string.isRequired,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.handleLoaded = this.handleLoaded.bind(this)\n  }\n  */\n\n  /*\n   * If supplied, this method will get called once the image has finished loading. For instance,\n   * we may want to wait until all images have finished loading before rendering them.\n   */\n  const handleLoaded = () => {\n    if (props.onLoad) props.onLoad(props.id)\n  }\n\n  const { className, link, title, url } = props\n  const image = <img src={url} alt={title} onLoad={handleLoaded} />\n\n  const content = !link\n    ? image\n    : (<a href={link} rel=\"noopener noreferrer\" target=\"_blank\">\n        {image}\n      </a>)\n\n\n    return (\n      <div className={className}>\n        {content}\n      </div>\n    )\n}\n\nexport default ImageThumbnail\n"]},"metadata":{},"sourceType":"module"}